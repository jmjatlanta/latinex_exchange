//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2023-05-21 18:57:58 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-23 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793603L
#error Perf_types.hpp version 1.4.3 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// Perf_types.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_506572665F74797065732E687070_
#define FIX8_506572665F74797065732E687070_

namespace FIX8 {
namespace TEX {

//-------------------------------------------------------------------------------------------------
using Account = Field<f8String, 1>;
//-------------------------------------------------------------------------------------------------
using AvgPx = Field<price, 6>;
//-------------------------------------------------------------------------------------------------
using BeginSeqNo = Field<int, 7>;
//-------------------------------------------------------------------------------------------------
using BeginString = Field<f8String, 8>;
//-------------------------------------------------------------------------------------------------
using BodyLength = Field<int, 9>;
//-------------------------------------------------------------------------------------------------
using CheckSum = Field<f8String, 10>;
//-------------------------------------------------------------------------------------------------
using ClOrdID = Field<f8String, 11>;
//-------------------------------------------------------------------------------------------------
using Commission = Field<Amt, 12>;
//-------------------------------------------------------------------------------------------------
using CumQty = Field<Qty, 14>;
//-------------------------------------------------------------------------------------------------
using Currency = Field<currency, 15>;
//-------------------------------------------------------------------------------------------------
using EndSeqNo = Field<int, 16>;
//-------------------------------------------------------------------------------------------------
using ExecID = Field<f8String, 17>;
//-------------------------------------------------------------------------------------------------
using ExecInst = Field<MultipleStringValue, 18>;
const f8String ExecInst_STAY_ON_OFFERSIDE("0");
const f8String ExecInst_NOT_HELD("1");
const f8String ExecInst_WORK("2");
const f8String ExecInst_GO_ALONG("3");
const f8String ExecInst_OVER_THE_DAY("4");
const f8String ExecInst_HELD("5");
const f8String ExecInst_PARTICIPATE_DONT_INITIATE("6");
const f8String ExecInst_STRICT_SCALE("7");
const f8String ExecInst_TRY_TO_SCALE("8");
const f8String ExecInst_STAY_ON_BIDSIDE("9");
const f8String ExecInst_NO_CROSS("A");
const f8String ExecInst_OK_TO_CROSS("B");
const f8String ExecInst_CALL_FIRST("C");
const f8String ExecInst_PERCENT_OF_VOLUME("D");
const f8String ExecInst_DO_NOT_INCREASE("E");
const f8String ExecInst_DO_NOT_REDUCE("F");
const f8String ExecInst_ALL_OR_NONE("G");
const f8String ExecInst_INSTITUTIONS_ONLY("I");
const f8String ExecInst_LAST_PEG("L");
const f8String ExecInst_MID_PRICE_PEG("M");
const f8String ExecInst_NON_NEGOTIABLE("N");
const f8String ExecInst_OPENING_PEG("O");
const f8String ExecInst_MARKET_PEG("P");
const f8String ExecInst_PRIMARY_PEG("R");
const f8String ExecInst_SUSPEND("S");
const f8String ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER("T");
const f8String ExecInst_CUSTOMER_DISPLAY_INSTRUCTION("U");
const f8String ExecInst_NETTING("V");
const f8String ExecInst_PEG_TO_VWAP("W");
const size_t ExecInst_realm_els(29);
//-------------------------------------------------------------------------------------------------
using ExecRefID = Field<f8String, 19>;
//-------------------------------------------------------------------------------------------------
using ExecTransType = Field<char, 20>;
const char ExecTransType_NEW('0');
const char ExecTransType_CANCEL('1');
const char ExecTransType_CORRECT('2');
const char ExecTransType_STATUS('3');
const size_t ExecTransType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using HandlInst = Field<char, 21>;
const char HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION('1');
const char HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK('2');
const char HandlInst_MANUAL_ORDER_BEST_EXECUTION('3');
const size_t HandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IDSource = Field<f8String, 22>;
const f8String IDSource_CUSIP("1");
const f8String IDSource_SEDOL("2");
const f8String IDSource_QUIK("3");
const f8String IDSource_ISIN_NUMBER("4");
const f8String IDSource_RIC_CODE("5");
const f8String IDSource_ISO_CURRENCY_CODE("6");
const f8String IDSource_ISO_COUNTRY_CODE("7");
const f8String IDSource_EXCHANGE_SYMBOL("8");
const f8String IDSource_CONSOLIDATED_TAPE_ASSOCIATION("9");
const size_t IDSource_realm_els(9);
//-------------------------------------------------------------------------------------------------
// Last capacity
using LastCapacity = Field<char, 29>;
const char LastCapacity_AGENT('1');
const char LastCapacity_CROSS_AS_AGENT('2');
const char LastCapacity_CROSS_AS_PRINCIPAL('3');
const char LastCapacity_PRINCIPAL('4');
const size_t LastCapacity_realm_els(4);
//-------------------------------------------------------------------------------------------------
using LastMkt = Field<Exchange, 30>;
//-------------------------------------------------------------------------------------------------
// Last price
using LastPx = Field<price, 31>;
//-------------------------------------------------------------------------------------------------
using LastShares = Field<Qty, 32>;
//-------------------------------------------------------------------------------------------------
using MsgSeqNum = Field<int, 34>;
//-------------------------------------------------------------------------------------------------
using MsgType = Field<f8String, 35>;
const f8String MsgType_HEARTBEAT("0");
const f8String MsgType_TEST_REQUEST("1");
const f8String MsgType_RESEND_REQUEST("2");
const f8String MsgType_REJECT("3");
const f8String MsgType_SEQUENCE_RESET("4");
const f8String MsgType_LOGOUT("5");
const f8String MsgType_INDICATION_OF_INTEREST("6");
const f8String MsgType_ADVERTISEMENT("7");
const f8String MsgType_EXECUTION_REPORT("8");
const f8String MsgType_ORDER_CANCEL_REJECT("9");
const f8String MsgType_LOGON("A");
const f8String MsgType_NEWS("B");
const f8String MsgType_EMAIL("C");
const f8String MsgType_ORDER_SINGLE("D");
const f8String MsgType_ORDER_LIST("E");
const f8String MsgType_ORDER_CANCEL_REQUEST("F");
const f8String MsgType_ORDER_CANCEL_REPLACE_REQUEST("G");
const f8String MsgType_ORDER_STATUS_REQUEST("H");
const f8String MsgType_ALLOCATION("J");
const f8String MsgType_LIST_CANCEL_REQUEST("K");
const f8String MsgType_LIST_EXECUTE("L");
const f8String MsgType_LIST_STATUS_REQUEST("M");
const f8String MsgType_LIST_STATUS("N");
const f8String MsgType_ALLOCATION_ACK("P");
const f8String MsgType_DONT_KNOW_TRADE("Q");
const f8String MsgType_QUOTE_REQUEST("R");
const f8String MsgType_QUOTE("S");
const f8String MsgType_SETTLEMENT_INSTRUCTIONS("T");
const f8String MsgType_MARKET_DATA_REQUEST("V");
const f8String MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH("W");
const f8String MsgType_MARKET_DATA_INCREMENTAL_REFRESH("X");
const f8String MsgType_MARKET_DATA_REQUEST_REJECT("Y");
const f8String MsgType_QUOTE_CANCEL("Z");
const f8String MsgType_QUOTE_STATUS_REQUEST("a");
const f8String MsgType_QUOTE_ACKNOWLEDGEMENT("b");
const f8String MsgType_SECURITY_DEFINITION_REQUEST("c");
const f8String MsgType_SECURITY_DEFINITION("d");
const f8String MsgType_SECURITY_STATUS_REQUEST("e");
const f8String MsgType_SECURITY_STATUS("f");
const f8String MsgType_TRADING_SESSION_STATUS_REQUEST("g");
const f8String MsgType_TRADING_SESSION_STATUS("h");
const f8String MsgType_MASS_QUOTE("i");
const f8String MsgType_BUSINESS_MESSAGE_REJECT("j");
const f8String MsgType_BID_REQUEST("k");
const f8String MsgType_BID_RESPONSE("l");
const f8String MsgType_LIST_STRIKE_PRICE("m");
const size_t MsgType_realm_els(46);
//-------------------------------------------------------------------------------------------------
using NewSeqNo = Field<int, 36>;
//-------------------------------------------------------------------------------------------------
using OrderID = Field<f8String, 37>;
//-------------------------------------------------------------------------------------------------
using OrderQty = Field<Qty, 38>;
//-------------------------------------------------------------------------------------------------
using OrdStatus = Field<char, 39>;
const char OrdStatus_NEW('0');
const char OrdStatus_PARTIALLY_FILLED('1');
const char OrdStatus_FILLED('2');
const char OrdStatus_DONE_FOR_DAY('3');
const char OrdStatus_CANCELED('4');
const char OrdStatus_REPLACED('5');
const char OrdStatus_PENDING_CANCEL('6');
const char OrdStatus_STOPPED('7');
const char OrdStatus_REJECTED('8');
const char OrdStatus_SUSPENDED('9');
const char OrdStatus_PENDING_NEW('A');
const char OrdStatus_CALCULATED('B');
const char OrdStatus_EXPIRED('C');
const char OrdStatus_ACCEPTED_FOR_BIDDING('D');
const char OrdStatus_PENDING_REPLACE('E');
const size_t OrdStatus_realm_els(15);
//-------------------------------------------------------------------------------------------------
using OrdType = Field<char, 40>;
const char OrdType_MARKET('1');
const char OrdType_LIMIT('2');
const char OrdType_STOP('3');
const char OrdType_STOP_LIMIT('4');
const char OrdType_MARKET_ON_CLOSE('5');
const char OrdType_WITH_OR_WITHOUT('6');
const char OrdType_LIMIT_OR_BETTER('7');
const char OrdType_LIMIT_WITH_OR_WITHOUT('8');
const char OrdType_ON_BASIS('9');
const char OrdType_ON_CLOSE('A');
const char OrdType_LIMIT_ON_CLOSE('B');
const char OrdType_FOREX_C('C');
const char OrdType_PREVIOUSLY_QUOTED('D');
const char OrdType_PREVIOUSLY_INDICATED('E');
const char OrdType_FOREX_F('F');
const char OrdType_FOREX_G('G');
const char OrdType_FOREX_H('H');
const char OrdType_FUNARI('I');
const char OrdType_PEGGED('P');
const size_t OrdType_realm_els(19);
//-------------------------------------------------------------------------------------------------
using OrigClOrdID = Field<f8String, 41>;
//-------------------------------------------------------------------------------------------------
using PossDupFlag = Field<Boolean, 43>;
const char PossDupFlag_NO('N');
const char PossDupFlag_YES('Y');
const size_t PossDupFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using Price = Field<price, 44>;
//-------------------------------------------------------------------------------------------------
using RefSeqNum = Field<int, 45>;
//-------------------------------------------------------------------------------------------------
using SecurityID = Field<f8String, 48>;
//-------------------------------------------------------------------------------------------------
using SenderCompID = Field<f8String, 49>;
//-------------------------------------------------------------------------------------------------
using SendingTime = Field<UTCTimestamp, 52>;
//-------------------------------------------------------------------------------------------------
using Side = Field<char, 54>;
const char Side_BUY('1');
const char Side_SELL('2');
const char Side_BUY_MINUS('3');
const char Side_SELL_PLUS('4');
const char Side_SELL_SHORT('5');
const char Side_SELL_SHORT_EXEMPT('6');
const char Side_UNDISCLOSED('7');
const char Side_CROSS('8');
const char Side_CROSS_SHORT('9');
const size_t Side_realm_els(9);
//-------------------------------------------------------------------------------------------------
using Symbol = Field<f8String, 55>;
//-------------------------------------------------------------------------------------------------
using TargetCompID = Field<f8String, 56>;
//-------------------------------------------------------------------------------------------------
using Text = Field<f8String, 58>;
//-------------------------------------------------------------------------------------------------
using TimeInForce = Field<char, 59>;
const char TimeInForce_DAY('0');
const char TimeInForce_GOOD_TILL_CANCEL('1');
const char TimeInForce_AT_THE_OPENING('2');
const char TimeInForce_IMMEDIATE_OR_CANCEL('3');
const char TimeInForce_FILL_OR_KILL('4');
const char TimeInForce_GOOD_TILL_CROSSING('5');
const char TimeInForce_GOOD_TILL_DATE('6');
const size_t TimeInForce_realm_els(7);
//-------------------------------------------------------------------------------------------------
using TransactTime = Field<UTCTimestamp, 60>;
//-------------------------------------------------------------------------------------------------
using SettlmntTyp = Field<char, 63>;
const char SettlmntTyp_REGULAR('0');
const char SettlmntTyp_CASH('1');
const char SettlmntTyp_NEXT_DAY('2');
const char SettlmntTyp_T_PLUS_2('3');
const char SettlmntTyp_T_PLUS_3('4');
const char SettlmntTyp_T_PLUS_4('5');
const char SettlmntTyp_FUTURE('6');
const char SettlmntTyp_WHEN_ISSUED('7');
const char SettlmntTyp_SELLERS_OPTION('8');
const char SettlmntTyp_T_PLUS_5('9');
const size_t SettlmntTyp_realm_els(10);
//-------------------------------------------------------------------------------------------------
using FutSettDate = Field<LocalMktDate, 64>;
//-------------------------------------------------------------------------------------------------
using SymbolSfx = Field<f8String, 65>;
//-------------------------------------------------------------------------------------------------
using ListID = Field<f8String, 66>;
//-------------------------------------------------------------------------------------------------
using TradeDate = Field<LocalMktDate, 75>;
//-------------------------------------------------------------------------------------------------
using ExecBroker = Field<f8String, 76>;
//-------------------------------------------------------------------------------------------------
using OpenClose = Field<char, 77>;
const char OpenClose_CLOSE('C');
const char OpenClose_OPEN('O');
const size_t OpenClose_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ProcessCode = Field<char, 81>;
const char ProcessCode_REGULAR('0');
const char ProcessCode_SOFT_DOLLAR('1');
const char ProcessCode_STEP_IN('2');
const char ProcessCode_STEP_OUT('3');
const char ProcessCode_SOFT_DOLLAR_STEP_IN('4');
const char ProcessCode_SOFT_DOLLAR_STEP_OUT('5');
const char ProcessCode_PLAN_SPONSOR('6');
const size_t ProcessCode_realm_els(7);
//-------------------------------------------------------------------------------------------------
using Signature = Field<data, 89>;
//-------------------------------------------------------------------------------------------------
using SecureDataLen = Field<Length, 90>;
//-------------------------------------------------------------------------------------------------
using SecureData = Field<data, 91>;
//-------------------------------------------------------------------------------------------------
using SignatureLength = Field<Length, 93>;
//-------------------------------------------------------------------------------------------------
using RawDataLength = Field<Length, 95>;
//-------------------------------------------------------------------------------------------------
using RawData = Field<data, 96>;
//-------------------------------------------------------------------------------------------------
using PossResend = Field<Boolean, 97>;
const char PossResend_NO('N');
const char PossResend_YES('Y');
const size_t PossResend_realm_els(2);
//-------------------------------------------------------------------------------------------------
using EncryptMethod = Field<int, 98>;
const int EncryptMethod_NONE(0);
const int EncryptMethod_PKCS(1);
const int EncryptMethod_DES(2);
const int EncryptMethod_PKCS_DES(3);
const int EncryptMethod_PGP_DES(4);
const int EncryptMethod_PGP_DES_MD5(5);
const int EncryptMethod_PEM_DES_MD5(6);
const size_t EncryptMethod_realm_els(7);
//-------------------------------------------------------------------------------------------------
using StopPx = Field<price, 99>;
//-------------------------------------------------------------------------------------------------
using ExDestination = Field<Exchange, 100>;
//-------------------------------------------------------------------------------------------------
using OrdRejReason = Field<int, 103>;
const int OrdRejReason_BROKER_OPTION(0);
const int OrdRejReason_UNKNOWN_SYMBOL(1);
const int OrdRejReason_EXCHANGE_CLOSED(2);
const int OrdRejReason_ORDER_EXCEEDS_LIMIT(3);
const int OrdRejReason_TOO_LATE_TO_ENTER(4);
const int OrdRejReason_UNKNOWN_ORDER(5);
const int OrdRejReason_DUPLICATE_ORDER(6);
const int OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER(7);
const int OrdRejReason_STALE_ORDER(8);
const size_t OrdRejReason_realm_els(9);
//-------------------------------------------------------------------------------------------------
using Issuer = Field<f8String, 106>;
//-------------------------------------------------------------------------------------------------
using SecurityDesc = Field<f8String, 107>;
//-------------------------------------------------------------------------------------------------
using HeartBtInt = Field<int, 108>;
//-------------------------------------------------------------------------------------------------
using ClientID = Field<f8String, 109>;
//-------------------------------------------------------------------------------------------------
using MinQty = Field<Qty, 110>;
//-------------------------------------------------------------------------------------------------
using MaxFloor = Field<Qty, 111>;
//-------------------------------------------------------------------------------------------------
using TestReqID = Field<f8String, 112>;
//-------------------------------------------------------------------------------------------------
using ReportToExch = Field<Boolean, 113>;
const char ReportToExch_NO('N');
const char ReportToExch_YES('Y');
const size_t ReportToExch_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LocateReqd = Field<Boolean, 114>;
const char LocateReqd_NO('N');
const char LocateReqd_YES('Y');
const size_t LocateReqd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OnBehalfOfCompID = Field<f8String, 115>;
//-------------------------------------------------------------------------------------------------
using QuoteID = Field<f8String, 117>;
//-------------------------------------------------------------------------------------------------
using SettlCurrAmt = Field<Amt, 119>;
//-------------------------------------------------------------------------------------------------
using SettlCurrency = Field<currency, 120>;
//-------------------------------------------------------------------------------------------------
using OrigSendingTime = Field<UTCTimestamp, 122>;
//-------------------------------------------------------------------------------------------------
using GapFillFlag = Field<Boolean, 123>;
const char GapFillFlag_NO('N');
const char GapFillFlag_YES('Y');
const size_t GapFillFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ExpireTime = Field<UTCTimestamp, 126>;
//-------------------------------------------------------------------------------------------------
using DeliverToCompID = Field<f8String, 128>;
//-------------------------------------------------------------------------------------------------
using PrevClosePx = Field<price, 140>;
//-------------------------------------------------------------------------------------------------
using ResetSeqNumFlag = Field<Boolean, 141>;
const char ResetSeqNumFlag_NO('N');
const char ResetSeqNumFlag_YES('Y');
const size_t ResetSeqNumFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ExecType = Field<char, 150>;
const char ExecType_NEW('0');
const char ExecType_PARTIAL_FILL('1');
const char ExecType_FILL('2');
const char ExecType_DONE_FOR_DAY('3');
const char ExecType_CANCELED('4');
const char ExecType_REPLACE('5');
const char ExecType_PENDING_CANCEL('6');
const char ExecType_STOPPED('7');
const char ExecType_REJECTED('8');
const char ExecType_SUSPENDED('9');
const char ExecType_PENDING_NEW('A');
const char ExecType_CALCULATED('B');
const char ExecType_EXPIRED('C');
const char ExecType_RESTATED('D');
const char ExecType_PENDING_REPLACE('E');
const size_t ExecType_realm_els(15);
//-------------------------------------------------------------------------------------------------
using LeavesQty = Field<Qty, 151>;
//-------------------------------------------------------------------------------------------------
using CashOrderQty = Field<Qty, 152>;
//-------------------------------------------------------------------------------------------------
using SecurityType = Field<f8String, 167>;
const f8String SecurityType_WILDCARD_ENTRY("?");
const f8String SecurityType_BANKERS_ACCEPTANCE("BA");
const f8String SecurityType_CONVERTIBLE_BOND("CB");
const f8String SecurityType_CERTIFICATE_OF_DEPOSIT("CD");
const f8String SecurityType_COLLATERALIZE_MORTGAGE_OBLIGATION("CMO");
const f8String SecurityType_CORPORATE_BOND("CORP");
const f8String SecurityType_COMMERCIAL_PAPER("CP");
const f8String SecurityType_CORPORATE_PRIVATE_PLACEMENT("CPP");
const f8String SecurityType_COMMON_STOCK("CS");
const f8String SecurityType_FEDERAL_HOUSING_AUTHORITY("FHA");
const f8String SecurityType_FEDERAL_HOME_LOAN("FHL");
const f8String SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION("FN");
const f8String SecurityType_FOREIGN_EXCHANGE_CONTRACT("FOR");
const f8String SecurityType_FUTURE("FUT");
const f8String SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION("GN");
const f8String SecurityType_TREASURIES_PLUS_AGENCY_DEBENTURE("GOVT");
const f8String SecurityType_MORTGAGE_IOETTE("IET");
const f8String SecurityType_MUTUAL_FUND("MF");
const f8String SecurityType_MORTGAGE_INTEREST_ONLY("MIO");
const f8String SecurityType_MORTGAGE_PRINCIPAL_ONLY("MPO");
const f8String SecurityType_MORTGAGE_PRIVATE_PLACEMENT("MPP");
const f8String SecurityType_MISCELLANEOUS_PASS_THRU("MPT");
const f8String SecurityType_MUNICIPAL_BOND("MUNI");
const f8String SecurityType_NO_ISITC_SECURITY_TYPE("NONE");
const f8String SecurityType_OPTION("OPT");
const f8String SecurityType_PREFERRED_STOCK("PS");
const f8String SecurityType_REPURCHASE_AGREEMENT("RP");
const f8String SecurityType_REVERSE_REPURCHASE_AGREEMENT("RVRP");
const f8String SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION("SL");
const f8String SecurityType_TIME_DEPOSIT("TD");
const f8String SecurityType_US_TREASURY_BILL("USTB");
const f8String SecurityType_WARRANT("WAR");
const f8String SecurityType_CATS_TIGERS_LIONS("ZOO");
const size_t SecurityType_realm_els(33);
//-------------------------------------------------------------------------------------------------
using EffectiveTime = Field<UTCTimestamp, 168>;
//-------------------------------------------------------------------------------------------------
using SecondaryOrderID = Field<f8String, 198>;
//-------------------------------------------------------------------------------------------------
using MaturityMonthYear = Field<MonthYear, 200>;
//-------------------------------------------------------------------------------------------------
using PutOrCall = Field<int, 201>;
const int PutOrCall_PUT(0);
const int PutOrCall_CALL(1);
const size_t PutOrCall_realm_els(2);
//-------------------------------------------------------------------------------------------------
using StrikePrice = Field<price, 202>;
//-------------------------------------------------------------------------------------------------
using CustomerOrFirm = Field<int, 204>;
const int CustomerOrFirm_CUSTOMER(0);
const int CustomerOrFirm_FIRM(1);
const size_t CustomerOrFirm_realm_els(2);
//-------------------------------------------------------------------------------------------------
using MaturityDay = Field<DayOfMonth, 205>;
//-------------------------------------------------------------------------------------------------
using OptAttribute = Field<char, 206>;
//-------------------------------------------------------------------------------------------------
using SecurityExchange = Field<Exchange, 207>;
//-------------------------------------------------------------------------------------------------
using MaxShow = Field<Qty, 210>;
//-------------------------------------------------------------------------------------------------
using ContractMultiplier = Field<fp_type, 231>;
//-------------------------------------------------------------------------------------------------
using TradingSessionID = Field<f8String, 336>;
//-------------------------------------------------------------------------------------------------
using EncodedIssuerLen = Field<Length, 348>;
//-------------------------------------------------------------------------------------------------
using EncodedIssuer = Field<data, 349>;
//-------------------------------------------------------------------------------------------------
using EncodedTextLen = Field<Length, 354>;
//-------------------------------------------------------------------------------------------------
using EncodedText = Field<data, 355>;
//-------------------------------------------------------------------------------------------------
using RefTagID = Field<int, 371>;
//-------------------------------------------------------------------------------------------------
using RefMsgType = Field<f8String, 372>;
//-------------------------------------------------------------------------------------------------
using SessionRejectReason = Field<int, 373>;
const int SessionRejectReason_INVALID_TAG_NUMBER(0);
const int SessionRejectReason_REQUIRED_TAG_MISSING(1);
const int SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE(2);
const int SessionRejectReason_UNDEFINED_TAG(3);
const int SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE(4);
const int SessionRejectReason_VALUE_IS_INCORRECT(5);
const int SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE(6);
const int SessionRejectReason_DECRYPTION_PROBLEM(7);
const int SessionRejectReason_SIGNATURE_PROBLEM(8);
const int SessionRejectReason_COMPID_PROBLEM(9);
const int SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM(10);
const int SessionRejectReason_INVALID_MSGTYPE(11);
const size_t SessionRejectReason_realm_els(12);
//-------------------------------------------------------------------------------------------------
using ComplianceID = Field<f8String, 376>;
//-------------------------------------------------------------------------------------------------
using ExecRestatementReason = Field<int, 378>;
const int ExecRestatementReason_GT_CORPORATE_ACTION(0);
const int ExecRestatementReason_GT_RENEWAL(1);
const int ExecRestatementReason_VERBAL_CHANGE(2);
const int ExecRestatementReason_REPRICING_OF_ORDER(3);
const int ExecRestatementReason_BROKER_OPTION(4);
const int ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY(5);
const size_t ExecRestatementReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using MaxMessageSize = Field<int, 383>;
//-------------------------------------------------------------------------------------------------
using NoMsgTypes = Field<int, 384>;
//-------------------------------------------------------------------------------------------------
using MsgDirection = Field<char, 385>;
const char MsgDirection_RECEIVE('R');
const char MsgDirection_SEND('S');
const size_t MsgDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DayOrderQty = Field<Qty, 424>;
//-------------------------------------------------------------------------------------------------
using DayCumQty = Field<Qty, 425>;
//-------------------------------------------------------------------------------------------------
using DayAvgPx = Field<price, 426>;
//-------------------------------------------------------------------------------------------------
using ExpireDate = Field<LocalMktDate, 432>;
//-------------------------------------------------------------------------------------------------
using Perf_BaseEntry = FieldTable;

} // namespace TEX
} // namespace FIX8
#endif // FIX8_506572665F74797065732E687070_
